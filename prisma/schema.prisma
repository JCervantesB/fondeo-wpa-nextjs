// Prisma Schema para Fondeo PWA
// Proyecto: PWA de Matching para Inversores y Emprendedores
// Versión: 1.0

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Modelo de Usuario Principal
model User {
  id          String   @id @default(cuid())
  email       String   @unique
  name        String
  avatar      String?
  type        UserType
  verified    Boolean  @default(false)
  active      Boolean  @default(true)
  lastSeen    DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relaciones principales
  profile     Profile?
  settings    UserSettings?
  
  // Autenticación (NextAuth.js)
  accounts    Account[]
  sessions    Session[]
  
  @@map("users")
  @@index([type, verified, active])
  @@index([email])
}

// Perfil detallado del usuario
model Profile {
  id          String   @id @default(cuid())
  userId      String   @unique
  bio         String?  @db.Text
  location    String?
  website     String?
  linkedin    String?
  twitter     String?
  
  // Información específica por tipo de usuario
  startupInfo  Json?    // Para emprendedores
  investorInfo Json?    // Para inversores
  
  // Métricas de perfil
  completeness Float    @default(0) // Porcentaje de completitud
  score        Float    @default(0) // Score algorítmico
  
  // Timestamps
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("profiles")
  @@index([completeness])
  @@index([score])
}

// Configuraciones de usuario
model UserSettings {
  id                    String  @id @default(cuid())
  userId                String  @unique
  
  // Notificaciones
  emailNotifications    Boolean @default(true)
  pushNotifications     Boolean @default(true)
  matchNotifications    Boolean @default(true)
  messageNotifications  Boolean @default(true)
  
  // Privacidad
  profileVisibility     VisibilityType @default(PUBLIC)
  showOnlineStatus      Boolean @default(true)
  
  // Preferencias de matching
  maxDistance          Int?    @default(50) // km
  ageRange             Json?   // {min: 25, max: 65}
  
  user                 User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("user_settings")
}

// Modelos para NextAuth.js
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// Enums
enum UserType {
  ENTREPRENEUR
  INVESTOR
  ADMIN
}

enum VisibilityType {
  PUBLIC
  VERIFIED_ONLY
  PRIVATE
}
